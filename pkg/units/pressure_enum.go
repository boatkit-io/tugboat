// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package units

import (
	"errors"
	"fmt"
)

const (
	// Psi is a PressureUnit of type Psi.
	Psi PressureUnit = iota
	// Hpa is a PressureUnit of type Hpa.
	Hpa
	// Pa is a PressureUnit of type Pa.
	Pa
)

var ErrInvalidPressureUnit = errors.New("not a valid PressureUnit")

const _PressureUnitName = "PsiHpaPa"

// PressureUnitValues returns a list of the values for PressureUnit
func PressureUnitValues() []PressureUnit {
	return []PressureUnit{
		Psi,
		Hpa,
		Pa,
	}
}

var _PressureUnitMap = map[PressureUnit]string{
	Psi: _PressureUnitName[0:3],
	Hpa: _PressureUnitName[3:6],
	Pa:  _PressureUnitName[6:8],
}

// String implements the Stringer interface.
func (x PressureUnit) String() string {
	if str, ok := _PressureUnitMap[x]; ok {
		return str
	}
	return fmt.Sprintf("PressureUnit(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x PressureUnit) IsValid() bool {
	_, ok := _PressureUnitMap[x]
	return ok
}

var _PressureUnitValue = map[string]PressureUnit{
	_PressureUnitName[0:3]: Psi,
	_PressureUnitName[3:6]: Hpa,
	_PressureUnitName[6:8]: Pa,
}

// ParsePressureUnit attempts to convert a string to a PressureUnit.
func ParsePressureUnit(name string) (PressureUnit, error) {
	if x, ok := _PressureUnitValue[name]; ok {
		return x, nil
	}
	return PressureUnit(0), fmt.Errorf("%s is %w", name, ErrInvalidPressureUnit)
}
