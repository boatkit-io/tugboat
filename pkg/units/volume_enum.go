// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package units

import (
	"errors"
	"fmt"
)

const (
	// Liter is a VolumeUnit of type Liter.
	Liter VolumeUnit = iota
	// MetersCubed is a VolumeUnit of type MetersCubed.
	MetersCubed
	// Gallon is a VolumeUnit of type Gallon.
	Gallon
)

var ErrInvalidVolumeUnit = errors.New("not a valid VolumeUnit")

const _VolumeUnitName = "LiterMetersCubedGallon"

// VolumeUnitValues returns a list of the values for VolumeUnit
func VolumeUnitValues() []VolumeUnit {
	return []VolumeUnit{
		Liter,
		MetersCubed,
		Gallon,
	}
}

var _VolumeUnitMap = map[VolumeUnit]string{
	Liter:       _VolumeUnitName[0:5],
	MetersCubed: _VolumeUnitName[5:16],
	Gallon:      _VolumeUnitName[16:22],
}

// String implements the Stringer interface.
func (x VolumeUnit) String() string {
	if str, ok := _VolumeUnitMap[x]; ok {
		return str
	}
	return fmt.Sprintf("VolumeUnit(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x VolumeUnit) IsValid() bool {
	_, ok := _VolumeUnitMap[x]
	return ok
}

var _VolumeUnitValue = map[string]VolumeUnit{
	_VolumeUnitName[0:5]:   Liter,
	_VolumeUnitName[5:16]:  MetersCubed,
	_VolumeUnitName[16:22]: Gallon,
}

// ParseVolumeUnit attempts to convert a string to a VolumeUnit.
func ParseVolumeUnit(name string) (VolumeUnit, error) {
	if x, ok := _VolumeUnitValue[name]; ok {
		return x, nil
	}
	return VolumeUnit(0), fmt.Errorf("%s is %w", name, ErrInvalidVolumeUnit)
}
