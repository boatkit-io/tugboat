// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package units

import (
	"errors"
	"fmt"
)

const (
	// Meter is a DistanceUnit of type Meter.
	Meter DistanceUnit = iota
	// Foot is a DistanceUnit of type Foot.
	Foot
	// Mile is a DistanceUnit of type Mile.
	Mile
	// NauticalMile is a DistanceUnit of type NauticalMile.
	NauticalMile
	// Fathom is a DistanceUnit of type Fathom.
	Fathom
)

var ErrInvalidDistanceUnit = errors.New("not a valid DistanceUnit")

const _DistanceUnitName = "MeterFootMileNauticalMileFathom"

// DistanceUnitValues returns a list of the values for DistanceUnit
func DistanceUnitValues() []DistanceUnit {
	return []DistanceUnit{
		Meter,
		Foot,
		Mile,
		NauticalMile,
		Fathom,
	}
}

var _DistanceUnitMap = map[DistanceUnit]string{
	Meter:        _DistanceUnitName[0:5],
	Foot:         _DistanceUnitName[5:9],
	Mile:         _DistanceUnitName[9:13],
	NauticalMile: _DistanceUnitName[13:25],
	Fathom:       _DistanceUnitName[25:31],
}

// String implements the Stringer interface.
func (x DistanceUnit) String() string {
	if str, ok := _DistanceUnitMap[x]; ok {
		return str
	}
	return fmt.Sprintf("DistanceUnit(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x DistanceUnit) IsValid() bool {
	_, ok := _DistanceUnitMap[x]
	return ok
}

var _DistanceUnitValue = map[string]DistanceUnit{
	_DistanceUnitName[0:5]:   Meter,
	_DistanceUnitName[5:9]:   Foot,
	_DistanceUnitName[9:13]:  Mile,
	_DistanceUnitName[13:25]: NauticalMile,
	_DistanceUnitName[25:31]: Fathom,
}

// ParseDistanceUnit attempts to convert a string to a DistanceUnit.
func ParseDistanceUnit(name string) (DistanceUnit, error) {
	if x, ok := _DistanceUnitValue[name]; ok {
		return x, nil
	}
	return DistanceUnit(0), fmt.Errorf("%s is %w", name, ErrInvalidDistanceUnit)
}

// MarshalText implements the text marshaller method.
func (x DistanceUnit) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *DistanceUnit) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseDistanceUnit(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
