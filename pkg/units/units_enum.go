// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package units

import (
	"errors"
	"fmt"
)

const (
	// UnitTypeDistance is a UnitType of type Distance.
	UnitTypeDistance UnitType = iota
	// UnitTypeFlow is a UnitType of type Flow.
	UnitTypeFlow
	// UnitTypePressure is a UnitType of type Pressure.
	UnitTypePressure
	// UnitTypeTemperature is a UnitType of type Temperature.
	UnitTypeTemperature
	// UnitTypeVelocity is a UnitType of type Velocity.
	UnitTypeVelocity
	// UnitTypeVolume is a UnitType of type Volume.
	UnitTypeVolume
)

var ErrInvalidUnitType = errors.New("not a valid UnitType")

const _UnitTypeName = "DistanceFlowPressureTemperatureVelocityVolume"

// UnitTypeValues returns a list of the values for UnitType
func UnitTypeValues() []UnitType {
	return []UnitType{
		UnitTypeDistance,
		UnitTypeFlow,
		UnitTypePressure,
		UnitTypeTemperature,
		UnitTypeVelocity,
		UnitTypeVolume,
	}
}

var _UnitTypeMap = map[UnitType]string{
	UnitTypeDistance:    _UnitTypeName[0:8],
	UnitTypeFlow:        _UnitTypeName[8:12],
	UnitTypePressure:    _UnitTypeName[12:20],
	UnitTypeTemperature: _UnitTypeName[20:31],
	UnitTypeVelocity:    _UnitTypeName[31:39],
	UnitTypeVolume:      _UnitTypeName[39:45],
}

// String implements the Stringer interface.
func (x UnitType) String() string {
	if str, ok := _UnitTypeMap[x]; ok {
		return str
	}
	return fmt.Sprintf("UnitType(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x UnitType) IsValid() bool {
	_, ok := _UnitTypeMap[x]
	return ok
}

var _UnitTypeValue = map[string]UnitType{
	_UnitTypeName[0:8]:   UnitTypeDistance,
	_UnitTypeName[8:12]:  UnitTypeFlow,
	_UnitTypeName[12:20]: UnitTypePressure,
	_UnitTypeName[20:31]: UnitTypeTemperature,
	_UnitTypeName[31:39]: UnitTypeVelocity,
	_UnitTypeName[39:45]: UnitTypeVolume,
}

// ParseUnitType attempts to convert a string to a UnitType.
func ParseUnitType(name string) (UnitType, error) {
	if x, ok := _UnitTypeValue[name]; ok {
		return x, nil
	}
	return UnitType(0), fmt.Errorf("%s is %w", name, ErrInvalidUnitType)
}
